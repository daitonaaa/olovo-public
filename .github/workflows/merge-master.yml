name: Deploy prod

on:
  workflow_dispatch:

jobs:
  delete-old-arts:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Delete Old Artifacts
        uses: actions/github-script@v6
        id: artifact
        with:
          script: |
            const res = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            res.data.artifacts
              .forEach(({ id }) => {
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: id,
                })
              })

  build-backend:
    needs: [delete-old-arts]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "18.x"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install deps
        working-directory: ./backend
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Lint backend
        working-directory: ./backend
        run: yarn lint
      - name: Build backend
        working-directory: ./backend
        run: yarn build
      - name: Create art dir
        run: mkdir -p temp_backend/artifacts
      - name: Archive art
        working-directory: ./backend
        run: tar cvzf ../temp_backend/artifacts/backend_dist.tar.gz dist/ .env nest-cli.json nest-cli-migrate.json ormconfig.js package.json package-lock.json yarn.lock
      - name: Temporarily save backend tar
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: temp_backend/artifacts
          retention-days: 1

  build-admin-ui:
    needs: [delete-old-arts]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "18.x"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install deps
        working-directory: ./admin-ui
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build admin-ui
        working-directory: ./admin-ui
        run: yarn build
      - name: Create art dir
        run: mkdir -p temp_admin_ui/artifacts
      - name: Archive art
        working-directory: ./admin-ui
        run: tar cvzf ../temp_admin_ui/artifacts/admin_ui_dist.tar.gz build/
      - name: Temporarily save admin_ui tar
        uses: actions/upload-artifact@v4
        with:
          name: admin-ui-artifacts
          path: temp_admin_ui/artifacts
          retention-days: 1

  build-client:
    needs: [delete-old-arts]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "18.x"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install deps
        working-directory: ./client
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Lint webapp
        working-directory: ./client
        run: yarn lint
      - name: Install libvips-dev
        working-directory: ./client
        run: sudo apt-get install libvips-dev
      - name: Build webapp
        working-directory: ./client
        run: yarn build
      - name: Create art dir
        run: mkdir -p temp_client/artifacts
      - name: Archive art
        working-directory: ./client
        run: tar cvzf ../temp_client/artifacts/client_dist.tar.gz .next/ core/ config/ pages/ public/ static/ templates/ scripts/ next.config.js package.json yarn.lock tsconfig.json
      - name: Temporarily save client tar
        uses: actions/upload-artifact@v4
        with:
          name: client-artifacts
          path: temp_client/artifacts
          retention-days: 1
  deploy:
    needs: [build-client, build-admin-ui, build-backend]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: temp_backend/artifacts
      - name: Upload backend tar to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          source: "temp_backend/artifacts/backend_dist.tar.gz"
          target: "~"

      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v4
        with:
          name: client-artifacts
          path: temp_client/artifacts
      - name: Upload client tar to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          source: "temp_client/artifacts/client_dist.tar.gz"
          target: "~"

      - uses: actions/download-artifact@v4
        with:
          name: admin-ui-artifacts
          path: temp_admin_ui/artifacts
      - name: Upload admin-ui tar to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          source: "temp_admin_ui/artifacts/admin_ui_dist.tar.gz"
          target: "~"

  start_or_reload_apps:
    needs: [deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Unzip backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd temp_backend/artifacts/
            tar -zxf backend_dist.tar.gz
      - name: Install backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd temp_backend/artifacts/
            yarn
      - name: Swap backend app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            pm2 del backend-app
            rm -rf backend
            cp -r temp_backend/artifacts/ backend
            cd backend
            rm .env
            cp /root/environments/.backend-env .env
            pm2 start yarn --name backend-app -- start:prod
            cd ..
            rm -rf temp_backend

      - name: Unzip admin-ui
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd temp_admin_ui/artifacts/
            tar -zxf admin_ui_dist.tar.gz
      - name: Swap admin-ui static files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd docker/data/olovo-admin
            rm -r *
            cd ~/temp_admin_ui/artifacts/build/
            mv * ~/docker/data/olovo-admin/
            rm -rf ~/temp_admin_ui/

      - name: Unzip client
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd temp_client/artifacts/
            tar -zxf client_dist.tar.gz
      - name: Install client
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            cd temp_client/artifacts/
            yarn
      - name: Swap client app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_PROD_HOST }}
          username: ${{ secrets.SSH_PROD_USER }}
          password: ${{ secrets.SSH_PROD_PASS }}
          port: ${{ secrets.SSH_PROD_PORT }}
          timeout: 3m
          script: |
            pm2 del client-app
            rm -rf client
            cp -r temp_client/artifacts/ client
            cd client
            pm2 start yarn --name client-app -- start:production
            cd ..
            rm -rf temp_client
